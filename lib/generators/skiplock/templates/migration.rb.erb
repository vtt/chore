class CreateSkiplockSchema < ActiveRecord::Migration<%= "[#{ActiveRecord::VERSION::MAJOR}.#{ActiveRecord::VERSION::MINOR}]" %>
  def up
    execute 'CREATE SCHEMA skiplock'
    create_table 'skiplock.jobs', id: :uuid do |t|
      t.string    :job_class, null: false
      t.string    :cron
      t.string    :queue_name
      t.string    :locale
      t.string    :timezone
      t.integer   :priority
      t.integer   :executions
      t.jsonb     :exception_executions
      t.jsonb     :data
      t.timestamp :expired_at
      t.timestamp :finished_at
      t.timestamp :scheduled_at
      t.timestamps null: false, default: -> { 'now()' }
    end
    execute %(CREATE OR REPLACE FUNCTION skiplock.notify() RETURNS TRIGGER AS $$
      BEGIN
        IF (NEW.finished_at IS NULL AND NEW.expired_at IS NULL) THEN
          PERFORM pg_notify('skiplock', CONCAT(TG_OP,',',NEW.id::TEXT,',',NEW.queue_name,',',NEW.priority,',',CAST(EXTRACT(EPOCH FROM NEW.scheduled_at) AS FLOAT)::text));
        END IF;
        RETURN NULL;
      END;
      $$ LANGUAGE plpgsql
    )
    execute "CREATE TRIGGER notify_job AFTER INSERT OR UPDATE ON skiplock.jobs FOR EACH ROW EXECUTE PROCEDURE skiplock.notify()"
    execute "CREATE INDEX jobs_index ON skiplock.jobs(scheduled_at ASC NULLS FIRST, priority ASC NULLS LAST, created_at ASC) WHERE expired_at IS NULL AND finished_at IS NULL"
    execute "CREATE INDEX jobs_retry_index ON skiplock.jobs(scheduled_at) WHERE executions IS NOT NULL AND expired_at IS NULL AND finished_at IS NULL"
    execute "CREATE INDEX jobs_cron_index ON skiplock.jobs(scheduled_at ASC NULLS FIRST, priority ASC NULLS LAST, created_at ASC) WHERE cron IS NOT NULL AND finished_at IS NULL"
    execute "CREATE UNIQUE INDEX jobs_unique_cron_index ON skiplock.jobs (job_class) WHERE cron IS NOT NULL"
  end

  def down
    execute 'DROP SCHEMA skiplock CASCADE'
  end
end
