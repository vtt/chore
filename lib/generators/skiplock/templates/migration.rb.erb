class CreateSkiplockSchema < ActiveRecord::Migration<%= "[#{ActiveRecord::VERSION::MAJOR}.#{ActiveRecord::VERSION::MINOR}]" %>
  def up
    execute 'CREATE SCHEMA skiplock'
    create_table 'skiplock.counters', id: :uuid do |t|
      t.integer   :completions, null: false, default: 0
      t.integer   :dispatches, null: false, default: 0
      t.integer   :expiries, null: false, default: 0
      t.integer   :failures, null: false, default: 0
      t.integer   :retries, null: false, default: 0
      t.date      :day, null: false, index: { unique: true }
    end
    create_table 'skiplock.jobs', id: :uuid do |t|
      t.uuid      :worker_id, index: true
      t.string    :job_class, null: false
      t.string    :queue_name, index: true
      t.string    :locale
      t.string    :timezone
      t.string    :cron
      t.integer   :priority
      t.integer   :executions
      t.jsonb     :exception_executions
      t.jsonb     :data
      t.boolean   :running, null: false, default: false, index: true
      t.timestamp :expired_at
      t.timestamp :finished_at
      t.timestamp :scheduled_at
      t.timestamps null: false, default: -> { 'now()' }
    end
    create_table 'skiplock.workers', id: :uuid do |t|
      t.integer   :pid, null: false
      t.integer   :sid, null: false
      t.integer   :capacity, null: false
      t.string    :hostname, null: false, index: true
      t.boolean   :master, null: false, default: false, index: true
      t.jsonb     :data
      t.timestamps null: false, index: true, default: -> { 'now()' }
    end    
    execute <<~ENDFUNC
      CREATE OR REPLACE FUNCTION skiplock.notify_jobs() RETURNS TRIGGER AS $$
        DECLARE
          record RECORD;
        BEGIN
          record = NEW;
          IF (TG_OP = 'DELETE') THEN
            record = OLD;
            IF (record.running = TRUE) THEN
              INSERT INTO skiplock.counters (day,completions) VALUES (NOW(),1) ON CONFLICT (day) DO UPDATE SET completions = skiplock.counters.completions + 1;
            END IF;
          ELSIF (TG_OP = 'UPDATE') THEN
            IF (OLD.running = FALSE AND record.running = TRUE) THEN
              IF (record.executions > 0) THEN
                INSERT INTO skiplock.counters (day,retries) VALUES (NOW(),1) ON CONFLICT (day) DO UPDATE SET retries = skiplock.counters.retries + 1;
              ELSE
                INSERT INTO skiplock.counters (day,dispatches) VALUES (NOW(),1) ON CONFLICT (day) DO UPDATE SET dispatches = skiplock.counters.dispatches + 1;
              END IF;
            ELSIF (OLD.finished_at IS NULL AND record.finished_at IS NOT NULL) THEN
              INSERT INTO skiplock.counters (day,completions) VALUES (NOW(),1) ON CONFLICT (day) DO UPDATE SET completions = skiplock.counters.completions + 1;
            ELSIF (OLD.running = TRUE AND record.running = FALSE AND record.expired_at IS NOT NULL) THEN
              INSERT INTO skiplock.counters (day,expiries) VALUES (NOW(),1) ON CONFLICT (day) DO UPDATE SET expiries = skiplock.counters.expiries + 1;
            ELSIF (OLD.running = TRUE AND record.running = FALSE AND record.expired_at IS NULL AND record.finished_at IS NULL) THEN
              INSERT INTO skiplock.counters (day,failures) VALUES (NOW(),1) ON CONFLICT (day) DO UPDATE SET failures = skiplock.counters.failures + 1;
            END IF;
          END IF;
          PERFORM pg_notify('skiplock::jobs', CONCAT(TG_OP,',',record.id::TEXT,',',record.worker_id::TEXT,',',record.job_class,',',record.queue_name,',',record.running::TEXT,',',CAST(EXTRACT(EPOCH FROM record.expired_at) AS FLOAT)::TEXT,',',CAST(EXTRACT(EPOCH FROM record.finished_at) AS FLOAT)::TEXT,',',CAST(EXTRACT(EPOCH FROM CASE WHEN record.scheduled_at IS NULL THEN record.updated_at ELSE record.scheduled_at END) AS FLOAT)::TEXT));
          RETURN NULL;
        END;
      $$ LANGUAGE plpgsql
    ENDFUNC
    execute <<~ENDFUNC
      CREATE OR REPLACE FUNCTION skiplock.notify_workers() RETURNS TRIGGER AS $$
        DECLARE
          record RECORD;
        BEGIN
          IF (TG_OP = 'DELETE') THEN
            record = OLD;
          ELSE
            record = NEW;
          END IF;
          PERFORM pg_notify('skiplock::workers', CONCAT(TG_OP,',',record.id::TEXT,',',record.hostname,',',record.master::TEXT,',',record.capacity,',',record.pid,',',record.sid,',',CAST(EXTRACT(EPOCH FROM record.created_at) AS FLOAT)::TEXT,',',CAST(EXTRACT(EPOCH FROM record.updated_at) AS FLOAT)::TEXT));
          RETURN NULL;
        END;
      $$ LANGUAGE plpgsql;
    ENDFUNC
    execute "CREATE TRIGGER notify_job AFTER INSERT OR UPDATE OR DELETE ON skiplock.jobs FOR EACH ROW EXECUTE PROCEDURE skiplock.notify_jobs()"
    execute "CREATE TRIGGER notify_worker AFTER INSERT OR UPDATE OR DELETE ON skiplock.workers FOR EACH ROW EXECUTE PROCEDURE skiplock.notify_workers()"
    execute "CREATE INDEX jobs_index ON skiplock.jobs(scheduled_at ASC NULLS FIRST, priority ASC NULLS LAST, created_at ASC) WHERE running = FALSE AND expired_at IS NULL AND finished_at IS NULL"
    execute "CREATE INDEX jobs_retry_index ON skiplock.jobs(scheduled_at) WHERE running = FALSE AND executions IS NOT NULL AND expired_at IS NULL AND finished_at IS NULL"
    execute "CREATE INDEX jobs_cron_index ON skiplock.jobs(scheduled_at ASC NULLS FIRST, priority ASC NULLS LAST, created_at ASC) WHERE cron IS NOT NULL AND finished_at IS NULL"
    execute "CREATE UNIQUE INDEX jobs_unique_cron_index ON skiplock.jobs (job_class) WHERE cron IS NOT NULL"
    execute "CREATE UNIQUE INDEX workers_unique_master_index ON skiplock.workers(hostname) WHERE master = TRUE"
  end

  def down
    execute 'DROP SCHEMA skiplock CASCADE'
  end
end
